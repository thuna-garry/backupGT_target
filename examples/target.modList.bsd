#! /bin/sh

############################################################################
# load global configuration
############################################################################
. ${0%/*}/target.conf

#-------------------------------------------------------------------------------
# - data lines consist of two fields (moduleName, comment) separated by a tab
#
# - each comment may contain the following options
#   method    scope: all            suppliedBy: targetHost (required)
#   auto      scope: any            suppliedBy: targetHost (optional)
#   relDS     scope: zfs,zfs.rsync  suppliedBy: targetHost (required)
#   origHost  scope: rsync,tar      suppliedBy: targetHost (optional)
#   origMod   scope: rsync,tar      suppliedBy: targetHost (optional)
#   origName  scope: rsync,tar      suppliedBy: targetHost (optional)
#   key       scope: rsync,tar      suppliedBy: targetHost (optional)
#   lastSnap  scope: zfs,zfs.rsync  suppliedBy: backupServer (required)
#
# - additional options unused by the backupGT.server
#   path      scope: rsync,tar      suppliedBy: targetHost (required)
#   rootDS    scope: zfs,zfs.rsync  suppliedBy: targetHost (required)
#   tmpDS     scope: zfs.rsync      suppliedBy: targetHost (required)
#-------------------------------------------------------------------------------


############################################################################
# local modules
############################################################################
#cat <<-EOF
#	root		auto=true method=rsync path=/root
#	etc		auto=true method=rsync path=/etc
#	usrLocalEtc	auto=true method=rsync path=/usr/local/etc
#	homeBackupGT	auto=true method=rsync path=/home/backupGT
#EOF


#cat > ${PROC_PATH_PREFIX}.root <<"__EOF__"
#    module_rsync_init() {
#        crontab -l -u root > /root/crontab.save 2>/dev/null
#        return 0
#    }
#__EOF__


#cat > ${PROC_PATH_PREFIX}.homeBackupGT <<"__EOF__"
#    module_rsync_init() {
#        crontab -l -u backupGT > /home/backupGT/crontab.save 2>/dev/null
#        return 0
#    }
#__EOF__


############################################################################
# zfs dataset (will use snapshot send/receive technique)
############################################################################
zfsDatasets=`zfs list -H -r -o name $ZFS_ROOT_DS | sed '1d' | grep -v "^$ZFS_TMP_DS"`	

echo "$zfsDatasets" | while read dsName; do
    relDS=`     echo $dsName | sed "s:^$ZFS_ROOT_DS/::"`
    relDsFixed=`echo $relDS  | tr '/' '+'`
    
    printf "%s\t" $relDsFixed
    printf " %s"     "method=zfs"
    printf " %s"     "auto=true"
    printf " %s"     "rootDS=$ZFS_ROOT_DS"
    printf " %s"     "relDS=$relDS"
    printf " %s"     "tmpDS=$ZFS_TMP_DS"
    printf "\n"
done


############################################################################
# foreign module backups
#   only provide those which are not already listed as a zfs dataset
############################################################################
zfsPaths=`zfs list -H -r -o mountpoint $ZFS_ROOT_DS`	

find $ZFS_ROOT_DIR -maxdepth 3 -name current -exec readlink -f {} \; | sed "s:^$ZFS_ROOT_DIR/::" \
| while read path; do

    origHost=`echo $path | sed 's:\([^/]*\)/\([^/]*\)/\([^/]*\):\1:'`    # cut -d '/' -f 1
    origMod=` echo $path | sed 's:\([^/]*\)/\([^/]*\)/\([^/]*\):\2:'`    # cut -d '/' -f 2
    origName=`echo $path | sed 's:\([^/]*\)/\([^/]*\)/\([^/]*\):\3:'`    # cut -d '/' -f 3

    if echo "$zfsPaths" | grep -q "$ZFS_ROOT_DIR/$origHost"; then
        continue     # this host is already listed as a zfs dataset
    fi
    if echo "$zfsPaths" | grep -q "$ZFS_ROOT_DIR/$origHost/$origMod"; then
        continue     # this module is already listed as a zfs dataset
    fi

   printf "%s\t" "$origHost+$origMod"
   printf " %s"     "method=rsync"
   printf " %s"     "auto=true"
   printf " %s"     "path=$ZFS_ROOT_DIR/$path"
   printf " %s"     "origHost=$origHost"
   printf " %s"     "origMod=$origMod"
   printf " %s"     "origName=$origName"
   printf "\n"
done

